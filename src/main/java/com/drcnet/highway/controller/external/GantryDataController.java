package com.drcnet.highway.controller.external;

import com.alibaba.fastjson.JSON;
import com.drcnet.highway.dto.request.enternal.GantryDataDto;
import com.drcnet.highway.service.external.GantryDataService;
import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import sun.misc.BASE64Decoder;

import javax.annotation.Resource;
import java.io.FileOutputStream;
import java.io.OutputStream;

/**
 * @Author jack
 * @Date: 2019/10/21 16:10
 * @Desc:
 **/
@Slf4j
@RestController
@RequestMapping("gantryData")
@Api(value = "GantryDataController", tags = "龙门架数据接收接口")
public class GantryDataController {

    @Resource
    private GantryDataService gantryDataService;

    @PostMapping("receiveGantryData")
    public void receiveGantryData(@RequestBody GantryDataDto gantryDataDto) {
        if ("3".equals(gantryDataDto.getTaskNum())) {
            log.info(JSON.toJSONString(gantryDataDto));
            /*String carNoPath = "c:\\tmp\\img\\";
            convertBase642Img(carNoPath, gantryDataDto.getImgBase64(), gantryDataDto.getPlateNum());
            String carTypePath = "c:\\tmp\\img_type\\";
            convertBase642Img(carTypePath, gantryDataDto.getImgBase64Type(), gantryDataDto.getPlateNum());*/

            gantryDataService.processGantryData(gantryDataDto);
        }
    }


    private void convertBase642Img(String imgPath, String base64, String carNo) {
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            //Base64解码
            byte[] b = decoder.decodeBuffer(base64);
            for (int i = 0; i < b.length; ++i) {
                if (b[i] < 0) {
                    //调整异常数据
                    b[i] += 256;
                }
            }
            //生成jpeg图片

            //System.currentTimeMillis()
            //新生成的图片
            String imgFilePath = imgPath + carNo + ".jpg";
            OutputStream out = new FileOutputStream(imgFilePath);
            out.write(b);
            out.flush();
            out.close();
        } catch (Exception e) {
            log.error("图片转换错误：", e);
        }
    }

    public static void main(String[] args) {
        String base64 = "";
        String imgPath = "c:\\\\tmp\\\\img\\\\";
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            //Base64解码
            byte[] b = decoder.decodeBuffer(base64);
            for (int i = 0; i < b.length; ++i) {
                if (b[i] < 0) {
                    //调整异常数据
                    b[i] += 256;
                }
            }
            //生成jpeg图片

            //System.currentTimeMillis()
            //新生成的图片
            String imgFilePath = imgPath + 111 + ".jpg";
            OutputStream out = new FileOutputStream(imgFilePath);
            out.write(b);
            out.flush();
            out.close();
        } catch (Exception e) {
            log.error("图片转换错误：", e);
        }
    }
}
